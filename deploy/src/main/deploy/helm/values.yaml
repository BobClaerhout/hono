# Default values for eclipse-hono.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# dispatchRouterImageName contains the name (including tag)
# of the container image to use for the example AQMP Messaging Network
dispatchRouterImageName: ${dispatch-router.image.name}

# artemisImageName contains the name (including tag) of the container
# image to use for the example AMQP Messaging network
artemisImageName: ${artemis.image.name}

# honoContainerRegistry contains the host name of the container registry
# to pull Hono images from.
# This can be set to e.g. a private container registry where
# snapshot images have been pushed to.
# By default we pull from Docker Hub.
honoContainerRegistry: index.docker.io

# honoImageTag contains the image tag to use when pulling Hono container images.
# The default value is the chart's app version. It may be overridden in
# order to pull custom built images from a (private) container registry.
honoImageTag: ${helm.app-version}

# defaultJavaOptions contains options to pass to the JVM when starting
# up Hono's containers
defaultJavaOptions: ${default-java-options}

# the port that the Hono components' Prometheus scraping endpoint is exposed on
monitoring:
  prometheus:
    port: ${prometheus.scraping.port}

# healthCheckPort is the port that the Hono components bind their health check
# server to.
healthCheckPort: ${vertx.health.port}

# platform indicates the type of container orchestration platform we are deploying to.
# Supported values are:
# - openshift
# - kubernetes
#
# When setting to "openshift", Route resources will also be deployed.
platform: kubernetes

# useLoadBalancer indicates whether services should be deployed using the
# "LoadBalancer" type (true) or the "NodePort" type (false).
# This property will be ignored when deploying to platform "openshift".
useLoadBalancer: true

# jaeger contains properties for configuring the Jaeger tracing system that is used
# by Hono's components to trace the distributed processing of messages.
jaeger:
  # whether the Jaeger tracing component should be deployed
  enabled: false
  agentHost: jaeger-agent
  # environment variables for containers that provide tracing data
  env:
    JAEGER_AGENT_HOST: jaeger-agent
    JAEGER_AGENT_PORT: "6831"
    JAEGER_SAMPLER_TYPE: const
    JAEGER_SAMPLER_PARAM: 1
  deploy:
    # configuration of Jaeger deployment
    # see examples of spec definitions here: https://github.com/jaegertracing/jaeger-operator/tree/master/deploy/examples
    spec:
      strategy: allInOne
      storage:
        options:
          memory:
            max-traces: 100000


# Default values for prometheus-operator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
prometheus-operator:

  ## Provide a name in place of prometheus-operator for `app:` labels
  ##
  nameOverride: ""

  ## Provide a name to substitute for the full names of resources
  ##
  fullnameOverride: ""

  ## Labels to apply to all resources
  ##
  commonLabels: {}
  # scmhash: abc123
  # myLabel: aakkmd

  ## Create default rules for monitoring the cluster
  ##
  defaultRules:
    create: false

  ##
  global:
    rbac:
      create: true
      pspEnabled: true

    ## Reference to one or more secrets to be used when pulling images
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    imagePullSecrets: []
    # - name: "image-pull-secret"


  ## Configuration options for Grafana instance that can be created along with Prometheus
  ## see https://github.com/helm/charts/blob/master/stable/grafana/values.yaml
  ##
  grafana:
    enabled: true

    ## Deploy default dashboards.
    ##
    defaultDashboardsEnabled: false

    adminPassword: admin

    ## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
    ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
    ## ref: http://kubernetes.io/docs/user-guide/services/
    ##
    service:
      type: ClusterIP
      port: 3000
      annotations: {}
      labels: {}

    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
      datasources:
        enabled: true
        label: grafana_datasource


  ## Configuration for alertmanager
  ## ref: https://prometheus.io/docs/alerting/alertmanager/
  ##
  alertmanager:

    ## Deploy alertmanager
    ##
    enabled: false

  ## Component scraping the kube api server
  ##
  kubeApiServer:
    enabled: false

  ## Component scraping the kubelet and kubelet-hosted cAdvisor
  ##
  kubelet:
    enabled: false

  ## Component scraping the kube controller manager
  ##
  kubeControllerManager:
    enabled: false

  ## Component scraping coreDns. Use either this or kubeDns
  ##
  coreDns:
    enabled: false

  ## Component scraping kubeDns. Use either this or coreDns
  ##
  kubeDns:
    enabled: false

  ## Component scraping etcd
  ##
  kubeEtcd:
    enabled: false

  ## Component scraping kube scheduler
  ##
  kubeScheduler:
    enabled: false

  ## Component scraping kube state metrics
  ##
  kubeStateMetrics:
    enabled: false

  ## Deploy node exporter as a daemonset to all nodes
  ##
  nodeExporter:
    enabled: false

  ## Manages Prometheus and Alertmanager components
  ##
  prometheusOperator:
    enabled: true
    serviceMonitor:
      selfMonitor: false

  ## Deploy a Prometheus instance
  ##
  prometheus:
    enabled: false
